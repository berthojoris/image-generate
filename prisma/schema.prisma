// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// SQLite doesn't support enums, using string fields with constraints

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  username         String    @unique
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  passwordHash     String?
  role             String    @default("USER") // USER, EDITOR, ADMIN
  status           String    @default("ACTIVE") // ACTIVE, BANNED, PENDING
  resetToken       String?   // For password reset
  resetTokenExpiry DateTime? // Reset token expiration
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  articles     Article[]
  comments     Comment[]
  articleViews ArticleView[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  headerImage String?
  views       Int      @default(0)
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  readTime    Int?     // in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments     Comment[]
  articleViews ArticleView[]
  tags         ArticleTag[]

  @@index([published, createdAt])
  @@index([slug])
  @@index([authorId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  @@index([articleId, createdAt])
  @@index([authorId])
  @@index([parentId])
}

model ArticleView {
  id        String   @id @default(cuid())
  viewedAt  DateTime @default(now())
  ipAddress String?

  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  userId String?
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([articleId, viewedAt])
  @@index([userId])
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  // hex color for tag display
  createdAt   DateTime @default(now())

  articles ArticleTag[]

  @@index([slug])
}

model ArticleTag {
  articleId String
  tagId     String

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  @@index([email])
}